// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"uniswap-transaction/app/uniswap/job/internal/biz"
	conf2 "uniswap-transaction/app/uniswap/job/internal/conf"
	"uniswap-transaction/app/uniswap/job/internal/data"
	"uniswap-transaction/app/uniswap/job/internal/server"
	"uniswap-transaction/app/uniswap/job/internal/service"
	"uniswap-transaction/protobuf/conf"
)

// Injectors from wire.go:

// initApp init kratos application.
func initApp(envMode conf.EnvMode, confServer *conf2.Server, confData *conf2.Data, alert *conf2.Alert, logger log.Logger) (*kratos.App, func(), error) {
	client := server.NewNotifyClient(alert)
	template := server.NewAlertTemplate()
	manager := server.NewAlertManager(client, template, logger)
	db := data.NewMySQL(logger, confData)
	redisClient := data.NewRedisCmd(confData)
	bot := data.NewFeishuBot(confData)
	ethclientClient := data.NewEthereumClient(confData)
	dataData, cleanup, err := data.NewData(logger, db, redisClient, bot, ethclientClient)
	if err != nil {
		return nil, nil, err
	}
	transaction := data.NewTransaction(dataData)
	ethereumRepo := biz.NewEthereumRepo(logger, confData, dataData, transaction)
	ethereumService := service.NewEthereumService(logger, confData, ethereumRepo)
	httpServer := server.NewHTTPServer(envMode, confServer, confData, logger, manager, ethereumService)
	ethereumServer := server.NewEthereumServer(confData, logger, manager, ethereumService)
	app := newApp(logger, envMode, httpServer, ethereumServer)
	return app, func() {
		cleanup()
	}, nil
}
